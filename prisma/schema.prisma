generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  TRAINER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  username  String?
  role      UserRole  @default(CLIENT)
  createdAt DateTime @default(now()) 

  // Relationships
  ClientBookings Booking[] @relation("ClientBookings")
  trainerBookings Booking[] @relation("TrainerBookings")
  clientOf          User?   @relation("ClientTrainer", fields: [trainerId], references: [id])
  trainerId         Int?
  clients           User[] @relation("ClientTrainer")
 
}



model Booking {
  id Int @id @default(autoincrement())
  className String
  sessionType String
  dateTime DateTime
  note String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  expired Boolean @default(false)
  

  //Relationships
  // user User @relation(fields: [userId], references: [id])
  client User @relation("ClientBookings", fields: [clientId], references: [id])
  clientId Int
  trainer  User @relation("TrainerBookings", fields: [trainerId],  references: [id])
  trainerId Int
}

model workoutPlan {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  exercises Exercise[]
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Exercise {
  id Int @id @default(autoincrement())
  name String
  type String
  muscle String
  difficulty String
  instructions String
  workoutPlan workoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
}
