generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  TRAINER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  username  String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())

  // Relationships
  ClientBookings  Booking[]  @relation("ClientBookings")
  trainerBookings Booking[]  @relation("TrainerBookings")
  clientOf        User?      @relation("ClientTrainer", fields: [trainerId], references: [id])
  trainerId       Int?
  clients         User[]     @relation("ClientTrainer")
  gym_classes     GymClass[] @relation("TrainerClasses")

  workoutPlans workoutPlan[]

  @@index([trainerId])
}

model GymClass {
  id          Int      @id @default(autoincrement())
  name        String
  time        String
  trainerId   Int?
  trainer     User?    @relation("TrainerClasses", fields: [trainerId], references: [id])
  slots       Int
  description String   @db.Text
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to class
  bookings Booking[] @relation("ClassBookings")

  @@map("gym_classes")
}

model Booking {
  id          Int      @id @default(autoincrement())
  classId     Int
  class       GymClass @relation("ClassBookings", fields: [classId], references: [id], map: "fk_booking_class")
  sessionType String
  dateTime    DateTime
  note        String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  expired     Boolean  @default(false)

  //Relationships
  //user User @relation(fields: [userId], references: [id])
  client    User          @relation("ClientBookings", fields: [clientId], references: [id])
  clientId  Int
  trainer   User?         @relation("TrainerBookings", fields: [trainerId], references: [id])
  trainerId Int?
  status    BookingStatus @default(PENDING)
  //gymClass   GymClass   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([clientId])
  @@index([trainerId])
}

model workoutPlan {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  exercises Exercise[]

  // Add user relation
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@index([userId])
}

model Exercise {
  id           Int    @id @default(autoincrement())
  name         String
  type         String
  muscle       String
  difficulty   String
  instructions String

  // Relationship to workoutPlan
  workoutPlan   workoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int

  @@index([workoutPlanId])
}
